// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var Drawler, Player, player;

  Drawler = (function() {
    var config, ctxFrqBased, ctxTimeBased, gradient, hot, tempCanvasTimeBased, tempCtxTimeBased;

    function Drawler() {}

    hot = new chroma.ColorScale({
      colors: ['#000000', '#ff0000', '#ffff00', '#ffffff'],
      positions: [0, .25, .75, 1],
      mode: 'rgb',
      limits: [0, 300]
    });

    config = {
      frqBased: {
        width: 1000,
        height: 330
      },
      timeBased: {
        width: 999,
        height: 330
      }
    };

    ctxFrqBased = $('#frequency-based').get()[0].getContext('2d');

    gradient = ctxFrqBased.createLinearGradient(0, 0, 0, 300);

    gradient.addColorStop(1, '#000000');

    gradient.addColorStop(0.75, '#ff0000');

    gradient.addColorStop(0.25, '#ffff00');

    gradient.addColorStop(0, '#ffffff');

    ctxTimeBased = $("#time-based").get()[0].getContext('2d');

    tempCanvasTimeBased = document.createElement('canvas');

    tempCtxTimeBased = tempCanvasTimeBased.getContext('2d');

    tempCanvasTimeBased.width = config.timeBased.width;

    tempCanvasTimeBased.height = config.timeBased.height;

    Drawler.prototype.setTitle = function(title) {
      return $('#title').text(title);
    };

    Drawler.prototype.setVisibility = function() {
      return $('#time-based').css('display', 'block');
    };

    Drawler.prototype.drawFrequencyBased = function(array) {
      var i, value, _i, _len, _results;
      ctxFrqBased.clearRect(0, 0, config.frqBased.width, config.frqBased.height);
      ctxFrqBased.fillStyle = gradient;
      _results = [];
      for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
        value = array[i];
        _results.push(ctxFrqBased.fillRect(i * 4, config.frqBased.height - value, 3, config.frqBased.height));
      }
      return _results;
    };

    Drawler.prototype.drawTimeBased = function(array) {
      var canvas, i, value, _i, _len;
      canvas = document.getElementById('time-based');
      tempCtxTimeBased.drawImage(canvas, 0, 0, config.timeBased.width, config.timeBased.height);
      for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
        value = array[i];
        ctxTimeBased.fillStyle = hot.getColor(value).hex();
        ctxTimeBased.fillRect(config.timeBased.width - 1, config.timeBased.height - i, 1, 1);
      }
      ctxTimeBased.translate(-1, 0);
      ctxTimeBased.drawImage(tempCanvasTimeBased, 0, 0, config.timeBased.width, config.timeBased.height, 0, 0, config.timeBased.width, config.timeBased.height);
      return ctxTimeBased.setTransform(1, 0, 0, 1, 0, 0);
    };

    return Drawler;

  })();

  Player = (function() {
    var analyser, context, drawler, init, javascriptNode, loadThenPlay, onError, playSound, sourceNode;

    context = new AudioContext();

    drawler = new Drawler();

    sourceNode = void 0;

    analyser = void 0;

    javascriptNode = void 0;

    init = function() {
      javascriptNode = context.createScriptProcessor(2048, 1, 1);
      javascriptNode.connect(context.destination);
      analyser = context.createAnalyser();
      analyser.smoothingTimeConstant = 0.2;
      analyser.fftSize = 1024;
      sourceNode = context.createBufferSource();
      sourceNode.connect(analyser);
      analyser.connect(javascriptNode);
      sourceNode.connect(context.destination);
      return javascriptNode.onaudioprocess = function() {
        var data;
        data = new Uint8Array(analyser.frequencyBinCount);
        analyser.getByteFrequencyData(data);
        drawler.drawFrequencyBased(data);
        return drawler.drawTimeBased(data);
      };
    };

    loadThenPlay = function(song) {
      var request;
      request = new XMLHttpRequest();
      request.open('GET', song.path, true);
      request.responseType = 'arraybuffer';
      request.onload = function() {
        return context.decodeAudioData(request.response, function(buffer) {
          drawler.setTitle(song.title);
          drawler.setVisibility();
          return playSound(buffer);
        }, onError);
      };
      return request.send();
    };

    playSound = function(buffer) {
      sourceNode.buffer = buffer;
      return sourceNode.start(0);
    };

    onError = function(e) {
      return console.log(e);
    };

    function Player(playlist) {
      this.playlist = playlist;
      this.currentPlaying = 0;
      init();
    }

    Player.prototype.playRandom = function() {
      this.currentPlaying = 0;
      return loadThenPlay(this.playlist[this.currentPlaying]);
    };

    Player.prototype.playNext = function() {
      this.currentPlaying++;
      if (this.currentPlaying >= this.playlist.length) {
        this.currentPlaying = 0;
      }
      return loadThenPlay(this.playlist[this.currentPlaying]);
    };

    return Player;

  })();

  if (!window.AudioContext) {
    if (!window.webkitAudioContext) {
      alert('Audiocontext not found');
    }
    window.AudioContext = window.webkitAudioContext;
  }

  player = new Player([
    {
      path: 'media/1.mp3',
      title: 'Example 1'
    }, {
      path: 'media/2.wav',
      title: 'Example 2'
    }, {
      path: 'media/3.wav',
      title: 'Example 3'
    }, {
      path: 'media/4.wav',
      title: 'Example 4'
    }
  ]);

  player.playRandom();

  $(document).keydown(function(e) {
    if (e.keyCode === 13) {
      return player.playNext();
    }
  });

}).call(this);
